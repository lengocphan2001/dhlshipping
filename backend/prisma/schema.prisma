// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(50)
  email         String?   @unique @db.VarChar(100)
  passwordHash  String    @map("password_hash") @db.VarChar(255)
  firstName     String?   @map("first_name") @db.VarChar(50)
  lastName      String?   @map("last_name") @db.VarChar(50)
  gender        String?   @db.VarChar(20)
  phone         String?   @db.VarChar(20)
  referralCode  String?   @unique @map("referral_code") @db.VarChar(20)
  referredBy    String?   @map("referred_by") @db.VarChar(20)
  isActive      Boolean   @default(true) @map("is_active")
  isVerified    Boolean   @default(false) @map("is_verified")
  role          UserRole  @default(USER)
  
  // New fields for user management
  balance       Decimal?  @db.Decimal(15, 2) @default(0)
  creditScore   Int?      @map("credit_score") @default(0)
  bankName      String?   @map("bank_name") @db.VarChar(100)
  accountNumber String?   @map("account_number") @db.VarChar(50)
  accountHolderName String? @map("account_holder_name") @db.VarChar(100)
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  sessions           UserSession[]
  passwordResetTokens PasswordResetToken[]
  profile            UserProfile?
  reviews            ProductReview[]
  orders             Order[]

  @@map("users")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  address      String?  @db.Text
  city         String?  @db.VarChar(100)
  state        String?  @db.VarChar(100)
  country      String?  @db.VarChar(100)
  postalCode   String?  @map("postal_code") @db.VarChar(20)
  dateOfBirth  DateTime? @map("date_of_birth")
  profileImage String?  @map("profile_image") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  image       String?  @db.VarChar(255)
  category    String?  @db.VarChar(100)
  stock       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  reviews ProductReview[]

  @@map("products")
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  rating    Int      @db.TinyInt
  comment   String?  @db.Text
  tags      String?  @db.Text // Store as JSON string
  isApproved Boolean @default(false) @map("is_approved")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

model Order {
  id              Int           @id @default(autoincrement())
  orderId         String        @unique @map("order_id") @db.VarChar(50)
  userId          Int           @map("user_id")
  productName     String        @map("product_name") @db.VarChar(500)
  amount          Decimal       @db.Decimal(15, 2)
  amountPerOrder  Decimal       @map("amount_per_order") @db.Decimal(15, 2)
  status          OrderStatus   @default(PENDING)
  selectedProducts String       @map("selected_products") @db.Text // Store as JSON string
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
